# -*- coding: utf-8 -*-
import numpy as np
from sklearn import tree
import xlrd
from xlutils.copy import copy

class CCDT():

      def __init__(self,train_data_path,file_path,sheet_num):
          self.train_data_path=train_data_path
          self.sheetflag=sheetflag
          self.file_path=file_path
          self.sheet_num=sheet_num
          '''
          here above parameters are the external parameters whcich will be used in
          below functions。 init定义的参数，在后面实例化类时一定要写入这些参数。
          当然也可以不写init，这样的话实例化时就不需要写入参数，只是在后面调用类里面的函数的时候
          '''



      def _strnum(self,flag): #添加下标是为了内部调用
            '''the main function is to change the string to data values'''
            sum=0
            for i in flag:
                  m=ord(i)#将字符串变成ascii码
                  sum=sum+m
                  #sum=sum*100+m
            #print sum
            return sum

      def traintree(self):
            ''''' test data read '''
            data   = []
            labels = []
            with open(self.train_data_path) as ifile:
                  for line in ifile:
                        tokens = line.strip().split('	')
                        for i in range(0,len(tokens)-1):# the last one is the labels
                              tokens[i]=self._strnum(tokens[i])
                        data.append([float(tk) for tk in tokens[:-1]])
                        labels.append(tokens[-1])
            x=np.array(data)#数组化
            labels = np.array(labels)
            y = np.zeros(labels.shape)
            '''
            change labels to 0/1/2
            '''
            y[labels=='OK']=1
            y[labels=='Unknown']=2

            ''''' training data by use tree decision entropy '''
            clf = tree.DecisionTreeClassifier(criterion='entropy')# 为什么用熵
            clf.fit(x,y)
            ''''' show the weight '''
            print(clf.feature_importances_)
            '''input the test data'''
            data22=np.array(self._extract()[0])#这里调用后面列表的返回值，也可以使用 get item（0）
            answer=clf.predict(data22)
            table1=copy(self._extract()[1])
            table2=table1.get_sheet(self.sheet_num)
            i=1
            for an in answer:
                  if an==0:
                        table2.write(i,6,'NOK')#这里表示写入的列为第6列
                  elif an==1:
                        table2.write(i,6,'OK')
                  else:
                        table2.write(i,6,'UKNOWN')
                  i+=1
            table1.save('test.xls')

      def _extract(self):#添加下标是为了在类中调用
            datatable=xlrd.open_workbook(self.file_path)#
            table=datatable.sheet_by_name(self.sheetflag)
            i=1
            data22=np.zeros((table.nrows-1,4))#这里的数值4表示有4个属性，这里是可以更改的
            for j in range(2,6):#从表格中的地列读取一直到第6列
                  for i in range(1,table.nrows):
                        flag=table.cell(i,j).value
                        a=self._strnum(flag)#这里就是调用其中的函数
                        data22[i-1,j-2]=a
                        i+=1
                  j+=1
            return [data22,datatable] #必须是返回一个列表的形式，当然也可以不是返回一个列表的形式

if __name__ == '__main__':
    sheetflag='vlan-in-qos-profile' #the sheet store test data
    file_path='D:\\anaconda project\\7360-test-520.xls' #the workbook path
    train_data_path='D:\\anaconda project\\standard.txt'
    sheet_num=12 #sheetflag number
    a=CCDT(train_data_path,file_path,sheet_num)#这里是类的实例化
    a.traintree()#这里只调用了一个函数，因为其他的两个函数都是内部函数





